<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="7b0cc2d1-6a16-43a9-aca6-2572574c70fa" activeEnvironment="Default" name="AVM_MockService_Latest" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="${projectDir}" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="ca47114a-08b3-49df-ac26-6d2949757ff6" port="9096" path="/v1" host="swinmssauto09.noid.in.ssg" name="AVM_REST_MockService" docroot=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.mock.WsdlMockServiceDesktopPanel$LogListModel@maxSize">100</con:setting></con:settings><con:properties/><con:onRequestScript/><con:restMockAction name="/v1/query/automated-valuation" method="POST" resourcePath="/query/automated-valuation" id="237c17ee-080c-4d6e-a7f3-0755b51a3e51"><con:settings/><con:defaultResponse>Failure401</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success200_JSON" id="362fbbd0-33be-4d2b-9073-0d58d8d177f6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "mssReference": 3699,
    "success": {
    "serviceProvider": {
      "name": "HOMETRACK",
      "reference": "AVM Reference",
      "dateTime": "2011-08-12T20:17:46",
      "response": "{ success}"	
    },
    "valuation": {
      "amount": 1201,
      "confidenceValue": 2,
      "confidenceBand": "HIGH"
    },
    "marketRentalValue": {
      "amount": 1100.00,
      "confidenceValue": 2.3878,
      "confidenceBand": "LOW"
    }
  }
}</con:responseContent></con:response><con:response name="Failure401" id="ffe9cc14-cfd4-40a5-953f-7db039c6d94b" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent>{
  "mssReference": 3703,
    "failure": {
    "errors": {
      "error": [
        {
          "timestamp": "2020-06-19T09:14:45",
          "message": "automated 401",
          "code": 401,
          "diagnostic": "automated 401"
        }
      ]
    }
  }
}</con:responseContent></con:response><con:response name="Failure500" id="3487b0da-1b01-4b93-8e52-edbd23057b04" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent>{
  "mssReference": 11311412,
    "failure": {
    "errors": {
      "error": [
        {
          "timestamp": "2011-08-12T20:17:46",
          "message": "automated 500",
          "code": 500,
          "diagnostic": "automated 500"
        }
      ]
    }
  }
}</con:responseContent></con:response><con:response name="Failure503" id="ddf3a5ab-a37c-4dd7-96d0-c9b209be89fd" httpResponseStatus="503" mediaType="application/json"><con:settings/><con:responseContent>{
  "mssReference": 73,
    "failure": {
    "errors": {
      "error": [
        {
          "timestamp": "2011-08-12T20:17:46",
          "message": "automated 503",
          "code": 503,
          "diagnostic": "automated 503"
        }
      ]
    }
  }
}</con:responseContent></con:response><con:response name="Success_XML" id="5a220b75-dd63-4357-898d-0f603c2e5b21" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent><![CDATA[{
  "mssReference": 11111112,
    "success": {
    "serviceProvider": {
      "name": "ABCDEFGHI",
      "reference": "ABCDEFGHIJKLMNOPQRSTU",
      "dateTime": "2011-08-12T20:17:46",
      "response": "<Report><StackTrace>\"Sample XML Data\"</StackTrace><Msg>Output data invalid</Msg></Report>"
    },
    "valuation": {
      "amount": 610.75,
      "confidenceValue": 0.356536,
      "confidenceBand": "ABCD"
    },
    "marketRentalValue": {
      "amount": 640.5,
      "confidenceValue": 0.7878,
      "confidenceBand": "ABCDEFGHI"
    }
  }
}]]></con:responseContent></con:response><con:response name="Success_JSON" id="2552a8be-d520-4bcc-bdcc-9e71561761e7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "mssReference": 3687,
    "success": {
    "serviceProvider": {
      "name": "HOMETRACK",
      "reference": "AVM Reference",
      "dateTime": "2011-08-12T20:17:46",
      "response": "{    \"success\": {        \"mssReference\": \"11111112\",        \"serviceProvider\": {            \"name\": \"ABCDEFGHI\",            \"reference\": \"ABCDEFGHIJKLMNOPQRSTU\",            \"dateTime\": \"2011-08-12T20:17:46\",            \"response\": \"afgshs\",            \"valuation\": {                \"amount\": 610.75,                \"confidenceValue\": 0.356536,                \"confidenceBand\": \"ABCD\"            }        },        \"marketRentalValue\": {            \"amount\": 640.5,            \"confidenceValue\": 0.7878,            \"confidenceBand\": \"ABCDEFGHI\",            \"serviceProvider\": {                \"name\": \"ABCDEFGHI\",                \"reference\": \"ABCDEFGHIJKLMNOPQRSTU\",                \"dateTime\": \"2011-08-12T20:17:46\",                \"response\": \"afgshs\",                \"valuation\": {                    \"amount\": 610.75,                    \"confidenceValue\": 0.356536,                    \"confidenceBand\": \"ABCD\"                }            }        },        \"valuation\": {            \"amount\": 610.75,            \"confidenceValue\": 0.356536,            \"confidenceBand\": \"ABCD\",            \"marketRentalValue\": {                \"amount\": 640.5,                \"confidenceValue\": 0.7878,                \"confidenceBand\": \"ABCDEFGHI\",                \"serviceProvider\": {                    \"name\": \"ABCDEFGHI\",                    \"reference\": \"ABCDEFGHIJKLMNOPQRSTU\",                    \"dateTime\": \"2011-08-12T20:17:46\",                    \"response\": \"afgshs\",                    \"valuation\": {                        \"amount\": 610.75,                        \"confidenceValue\": 0.356536,                        \"confidenceBand\": \"ABCD\"                    }                }            }        }    }}"	
    },
    "valuation": {
      "amount": 1234567865449.01,
      "confidenceValue": 2.356536,
      "confidenceBand": "HIGH"
    },
    "marketRentalValue": {
      "amount": 1100.00,
      "confidenceValue": 2.3878,
      "confidenceBand": "LOW"
    }
  }
}</con:responseContent></con:response><con:response name="Success_Bytes" id="4ee0860f-be5a-425d-923e-27f5dff1813f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "mssReference": 11111112,
    "success": {
    "serviceProvider": {
      "name": "ABCDEFGHI",
      "reference": "ABCDEFGHIJKLMNOPQRSTU",
      "dateTime": "2011-08-12T20:17:46",
      "response": "JVBERi0xLjMNCiXi48/TDQoNCjEgMCBvYmoNCjw8DQovVHlwZSAvQ2F0YWxvZw0KL091dGxpbmVzIDIgMCBSDQovUGFnZXMgMyAwIFINCj4+DQplbmRvYmoNCg0KMiAwIG9iag0KPDwNCi9UeXBlIC9PdXRsaW5lcw0KL0NvdW50IDANCj4+DQplbmRvYmoNCg0KMyAwIG9iag0KPDwNCi9UeXBlIC9QYWdlcw0KL0NvdW50IDINCi9LaWRzIFsgNCAwIFIgNiAwIFIgXSANCj4+DQplbmRvYmoNCg0KNCAwIG9iag0KPDwNCi9UeXBlIC9QYWdlDQovUGFyZW50IDMgMCBSDQovUmVzb3VyY2VzIDw8DQovRm9udCA8PA0KL0YxIDkgMCBSIA0KPj4NCi9Qcm9jU2V0IDggMCBSDQo+Pg0KL01lZGlhQm94IFswIDAgNjEyLjAwMDAgNzkyLjAwMDBdDQovQ29udGVudHMgNSAwIFINCj4+DQplbmRvYmoNCg0KNSAwIG9iag0KPDwgL0xlbmd0aCAxMDc0ID4+DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBBIFNpbXBsZSBQREYgRmlsZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIFRoaXMgaXMgYSBzbWFsbCBkZW1vbnN0cmF0aW9uIC5wZGYgZmlsZSAtICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjY0LjcwNDAgVGQNCigganVzdCBmb3IgdXNlIGluIHRoZSBWaXJ0dWFsIE1lY2hhbmljcyB0dXRvcmlhbHMuIE1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NTIuNzUyMCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDYyOC44NDgwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjE2Ljg5NjAgVGQNCiggdGV4dC4gQW5kIG1vcmUgdGV4dC4gQm9yaW5nLCB6enp6ei4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjA0Ljk0NDAgVGQNCiggbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDU5Mi45OTIwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNTY5LjA4ODAgVGQNCiggQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA1NTcuMTM2MCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBFdmVuIG1vcmUuIENvbnRpbnVlZCBvbiBwYWdlIDIgLi4uKSBUag0KRVQNCmVuZHN0cmVhbQ0KZW5kb2JqDQoNCjYgMCBvYmoNCjw8DQovVHlwZSAvUGFnZQ0KL1BhcmVudCAzIDAgUg0KL1Jlc291cmNlcyA8PA0KL0ZvbnQgPDwNCi9GMSA5IDAgUiANCj4+DQovUHJvY1NldCA4IDAgUg0KPj4NCi9NZWRpYUJveCBbMCAwIDYxMi4wMDAwIDc5Mi4wMDAwXQ0KL0NvbnRlbnRzIDcgMCBSDQo+Pg0KZW5kb2JqDQoNCjcgMCBvYmoNCjw8IC9MZW5ndGggNjc2ID4+DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBTaW1wbGUgUERGIEZpbGUgMiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIC4uLmNvbnRpbnVlZCBmcm9tIHBhZ2UgMS4gWWV0IG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NzYuNjU2MCBUZA0KKCBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY2NC43MDQwIFRkDQooIHRleHQuIE9oLCBob3cgYm9yaW5nIHR5cGluZyB0aGlzIHN0dWZmLiBCdXQgbm90IGFzIGJvcmluZyBhcyB3YXRjaGluZyApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY1Mi43NTIwIFRkDQooIHBhaW50IGRyeS4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NDAuODAwMCBUZA0KKCBCb3JpbmcuICBNb3JlLCBhIGxpdHRsZSBtb3JlIHRleHQuIFRoZSBlbmQsIGFuZCBqdXN0IGFzIHdlbGwuICkgVGoNCkVUDQplbmRzdHJlYW0NCmVuZG9iag0KDQo4IDAgb2JqDQpbL1BERiAvVGV4dF0NCmVuZG9iag0KDQo5IDAgb2JqDQo8PA0KL1R5cGUgL0ZvbnQNCi9TdWJ0eXBlIC9UeXBlMQ0KL05hbWUgL0YxDQovQmFzZUZvbnQgL0hlbHZldGljYQ0KL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcNCj4+DQplbmRvYmoNCg0KMTAgMCBvYmoNCjw8DQovQ3JlYXRvciAoUmF2ZSBcKGh0dHA6Ly93d3cubmV2cm9uYS5jb20vcmF2ZVwpKQ0KL1Byb2R1Y2VyIChOZXZyb25hIERlc2lnbnMpDQovQ3JlYXRpb25EYXRlIChEOjIwMDYwMzAxMDcyODI2KQ0KPj4NCmVuZG9iag0KDQp4cmVmDQowIDExDQowMDAwMDAwMDAwIDY1NTM1IGYNCjAwMDAwMDAwMTkgMDAwMDAgbg0KMDAwMDAwMDA5MyAwMDAwMCBuDQowMDAwMDAwMTQ3IDAwMDAwIG4NCjAwMDAwMDAyMjIgMDAwMDAgbg0KMDAwMDAwMDM5MCAwMDAwMCBuDQowMDAwMDAxNTIyIDAwMDAwIG4NCjAwMDAwMDE2OTAgMDAwMDAgbg0KMDAwMDAwMjQyMyAwMDAwMCBuDQowMDAwMDAyNDU2IDAwMDAwIG4NCjAwMDAwMDI1NzQgMDAwMDAgbg0KDQp0cmFpbGVyDQo8PA0KL1NpemUgMTENCi9Sb290IDEgMCBSDQovSW5mbyAxMCAwIFINCj4+DQoNCnN0YXJ0eHJlZg0KMjcxNA0KJSVFT0YNCg=="
    },
    "valuation": {
      "amount": 610.75,
      "confidenceValue": 0.356536,
      "confidenceBand": "ABCD"
    },
    "marketRentalValue": {
      "amount": 640.5,
      "confidenceValue": 0.7878,
      "confidenceBand": "ABCDEFGHI"
    }
  }
}</con:responseContent></con:response><con:response name="Success_Json_2" id="2e1d71a8-b33a-4c79-afba-ec00bda82c99" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "mssReference": 11111112,
    "success": {
    "serviceProvider": {
      "name": "ABCDEFGHI",
      "reference": "ABCDEFGHIJKLMNOPQRSTU",
      "dateTime": "2011-08-12T20:17:46",
      "response": "{\" success\": {\"mssReference\": \"11111112\",\"serviceProvider\": {\"name\": \"ABCDEFGHI\",\"reference\": \"ABCDEFGHIJKLMNOPQRSTU\",\"dateTime\": \"2011-08-12T20:17:46\",\"response\": \"afgshs\"},\"valuation\": {\"amount\": 610.75,\"confidenceValue\": 0.356536,\"confidenceBand\": \"ABCD\"},\"marketRentalValue\": {\"amount\": 640.5,\"confidenceValue\": 0.7878,\"confidenceBand\": \"ABCDEFGHI\"}}}"
      			
    },
    "valuation": {
      "amount": 610.75,
      "confidenceValue": 0.356536,
      "confidenceBand": "ABCD"
    },
    "marketRentalValue": {
      "amount": 640.5,
      "confidenceValue": 0.7878,
      "confidenceBand": "ABCDEFGHI"
    }
  }
}</con:responseContent></con:response><con:response name="Response 9" id="7ea3da8d-dacd-4f80-8dde-a6148956b14a" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<xsl:if test="/success != ''">
	<Success>
		<ServiceProvider>
			<Name>
				<xsl:value-of select="(/success/serviceProvider/name,'')[. ne ''][1]"/>
			</Name>
			<Reference>
				<xsl:value-of select="(/success/serviceProvider/reference,'')[. ne ''][1]"/>
			</Reference>
			<DateTime>
				<xsl:value-of select="(/success/serviceProvider/dateTime,'')[. ne ''][1]"/>
			</DateTime>
			<Response>
				<xsl:value-of select="(/success/serviceProvider/response,'')[. ne ''][1]"/>
			</Response>
		</ServiceProvider>
		<Valuation>
		<Amount>
			<xsl:value-of select="(/success/valuation/amount,'')[. ne ''][1]"/>
		</Amount>
		<xsl:if test="/success/valuation/confidenceValue != ''">
			<ConfidenceValue>
				<xsl:value-of select="(/success/valuation/confidenceValue,'')[. ne ''][1]"/>
			</ConfidenceValue>
		</xsl:if>
		<xsl:if test="/success/valuation/confidenceBand != ''">
			<ConfidenceBand>
				<xsl:value-of select="(/success/valuation/confidenceBand,'')[. ne ''][1]"/>
			</ConfidenceBand>
		</xsl:if>
	</Valuation>
	<xsl:if test="/success/marketRentalValue != ''">
	<MarketRentalValue>
		<xsl:if test="/success/marketRentalValue/amount != ''">
			<Amount>
				<xsl:value-of select="(/success/marketRentalValue/amount,'')[. ne ''][1]"/>
			</Amount>
		</xsl:if>
		<xsl:if test="/success/marketRentalValue/confidenceValue != ''">
			<ConfidenceValue>
				<xsl:value-of select="(/success/marketRentalValue/confidenceValue,'')[. ne ''][1]"/>
			</ConfidenceValue>
		</xsl:if>
		<xsl:if test="/success/marketRentalValue/confidenceBand != ''">
			<ConfidenceBand>
				<xsl:value-of select="(/success/marketRentalValue/confidenceBand,'')[. ne ''][1]"/>
			</ConfidenceBand>
		</xsl:if>
	</MarketRentalValue>
		</xsl:if>
	</Success>
</xsl:if>]]></con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>