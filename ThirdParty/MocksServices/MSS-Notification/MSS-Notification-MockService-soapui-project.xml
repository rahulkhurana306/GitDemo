<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="058e4584-6a3c-41e6-8fd0-62fc41fceb60" activeEnvironment="Default" name="MSS-Notification-MockService" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="f32e4ed4-95e8-43e1-baf5-a9ea40146a02" port="9095" path="/dmi" host="swinmssauto09.noid.in.ssg" name="MSS-Notification" docroot=""><con:settings/><con:properties/><con:restMockAction name="/authentication/v1/token" method="POST" resourcePath="/authentication/v1/token" id="dce61e45-eb44-4541-8ee5-39adb9ae9867"><con:settings/><con:defaultResponse>Scenario1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Scenario1" id="a3b91f22-1dd2-4e1d-a9f5-8f39d3e4e0f8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "access_token": "eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..PKmRnPEesYKxzkihNcZSRw.tNyPzITHJpacnvVJzpjjFyilrUVG0mq2di8Ww_OlEKu8JOwPBCFOkLtFzAgy82lNlB17L9mG3ujK_HJDy7HFkaEc1q_gU8kPctXRvooezRmnkZ2_xDeOe76T_Y5G9td-jJMfiuSkxDeXx-ME5RvHcI6r-myVFEsIKgIVNWtqhm5fBqkJViDPSe21cA7uDrLYtM0uzajp9ELjLkeNDgh0Qmgei6lSdjLbz01LIyoEfRT6caanfQrwGHPD9h1d9-bi4DDn59cLc_tOgRtl-teSe_E6V6vvxofgD_Wn6I2E_H-U1H0ryxagdlb_nQsAAgL3wxI2uDeQfYBsylR5_4Y7E5x5Qgc7YwrztbRUq9P5WgA3-OmOGgVZkUdU7udpzzmeSjt-T9DRc863fEGq1GEOa4FQXVscruvPiHeX-vZdLZjpIKkSPfPEAWl0sYPyAvhqeHoknU2GNr_JClFTSIAsJpEL-WZW1dNkmRn2pGiqSqu9oxjqKB2qdFHkyJRVrv2PbYnh3BklvwepYyH1RmRv11iYxxexNLm7Bi6Ew05b5254yMQAhdjRSqN4dDOtpUTFt2FqJNwlK8GdNbjv0XA_ZzDwe3dtBJgyM2R9HTI_rS4YqDgDqy_tb1whI6ICMkgjViwWTdNCx3_BPHCvdGNyBssxIu99bSxJ7weVKp8_r9LsqS0VhNq_ti_Md1qUn0klJMctZUMvZbZbcgx7dvTuPKTmldBPMNg5foKUjV2LJfPvNkLw0NhYIvJMHCKLkUhkp1fem30uHDc7qGaAlMsvV85GbyPnnzfr-noqE3Hri_yRr5i6BUcGSxYGUL25qZxY0rPmxd8ra4Bf10uCv13G9NmE6zqBfmikQnBkUFnpTkEcEMW4T3vrhHgUhHzmLGMxrpAoWDbhi3I5DomXPiIGRk7cwCNzVOh_j1pmiwcM-YcS7NRZgZurIIT6CEz4UIVlso99o8n-ibdRF-ux_fNJVdpqj6gAwuy3GKq08V1Qjr8-fJHRLlDHnuksD5PuYrt1FDXX5sC-Qrr2GGanGCIRVUaaoBw-R8LtCS76el0lbAa05-kRxMH6okQsBV2p6IgwIZiLtD8XcTRZlt4j9cvCh2VXtATbQgGkQvohUX6onj2OPch2cB0FEpsSlEeSv6RhBg7AL8NqaZKDVA1CicmNnHbmNjMu2Zu6OKSRNrELlaM.7yr8j_PAdwtJR8PoWOT_Nw",
    "token_type": "bearer",
    "expires_in": 1799,
    "scope": "reptilians",
    "jti": "acd1804e-eb0b-4b99-aa96-85a3a00d6171"
}</con:responseContent><con:header><con:name>content-type</con:name><con:value>application/json;charset=UTF-8</con:value></con:header></con:response><con:response name="Scenario2" id="fa970854-285b-4a72-99e6-b20c902603a0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "access_token": "eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..PKmRnPEesYKxzkihNcZSRw.tNyPzITHJpacnvVJzpjjFyilrUVG0mq2di8Ww_OlEKu8JOwPBCFOkLtFzAgy82lNlB17L9mG3ujK_HJDy7HFkaEc1q_gU8kPctXRvooezRmnkZ2_xDeOe76T_Y5G9td-jJMfiuSkxDeXx-ME5RvHcI6r-myVFEsIKgIVNWtqhm5fBqkJViDPSe21cA7uDrLYtM0uzajp9ELjLkeNDgh0Qmgei6lSdjLbz01LIyoEfRT6caanfQrwGHPD9h1d9-bi4DDn59cLc_tOgRtl-teSe_E6V6vvxofgD_Wn6I2E_H-U1H0ryxagdlb_nQsAAgL3wxI2uDeQfYBsylR5_4Y7E5x5Qgc7YwrztbRUq9P5WgA3-OmOGgVZkUdU7udpzzmeSjt-T9DRc863fEGq1GEOa4FQXVscruvPiHeX-vZdLZjpIKkSPfPEAWl0sYPyAvhqeHoknU2GNr_JClFTSIAsJpEL-WZW1dNkmRn2pGiqSqu9oxjqKB2qdFHkyJRVrv2PbYnh3BklvwepYyH1RmRv11iYxxexNLm7Bi6Ew05b5254yMQAhdjRSqN4dDOtpUTFt2FqJNwlK8GdNbjv0XA_ZzDwe3dtBJgyM2R9HTI_rS4YqDgDqy_tb1whI6ICMkgjViwWTdNCx3_BPHCvdGNyBssxIu99bSxJ7weVKp8_r9LsqS0VhNq_ti_Md1qUn0klJMctZUMvZbZbcgx7dvTuPKTmldBPMNg5foKUjV2LJfPvNkLw0NhYIvJMHCKLkUhkp1fem30uHDc7qGaAlMsvV85GbyPnnzfr-noqE3Hri_yRr5i6BUcGSxYGUL25qZxY0rPmxd8ra4Bf10uCv13G9NmE6zqBfmikQnBkUFnpTkEcEMW4T3vrhHgUhHzmLGMxrpAoWDbhi3I5DomXPiIGRk7cwCNzVOh_j1pmiwcM-YcS7NRZgZurIIT6CEz4UIVlso99o8n-ibdRF-ux_fNJVdpqj6gAwuy3GKq08V1Qjr8-fJHRLlDHnuksD5PuYrt1FDXX5sC-Qrr2GGanGCIRVUaaoBw-R8LtCS76el0lbAa05-kRxMH6okQsBV2p6IgwIZiLtD8XcTRZlt4j9cvCh2VXtATbQgGkQvohUX6onj2OPch2cB0FEpsSlEeSv6RhBg7AL8NqaZKDVA1CicmNnHbmNjMu2Zu6OKSRNrELlaM.7yr8j_PAdwtJR8PoWOT_Nw",
    "token_type": "bearer",
    "expires_in": 1,
    "scope": "reptilians",
    "jti": "acd1804e-eb0b-4b99-aa96-85a3a00d6171"
}</con:responseContent><con:header><con:name>content-type</con:name><con:value>application/json;charset=UTF-8</con:value></con:header></con:response><con:response name="Scenario3" id="aa549e1e-7424-47ce-a66f-b0cac380e08e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "access_token": "eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..PKmRnPEesYKxzkihNcZSRw.tNyPzITHJpacnvVJzpjjFyilrUVG0mq2di8Ww_OlEKu8JOwPBCFOkLtFzAgy82lNlB17L9mG3ujK_HJDy7HFkaEc1q_gU8kPctXRvooezRmnkZ2_xDeOe76T_Y5G9td-jJMfiuSkxDeXx-ME5RvHcI6r-myVFEsIKgIVNWtqhm5fBqkJViDPSe21cA7uDrLYtM0uzajp9ELjLkeNDgh0Qmgei6lSdjLbz01LIyoEfRT6caanfQrwGHPD9h1d9-bi4DDn59cLc_tOgRtl-teSe_E6V6vvxofgD_Wn6I2E_H-U1H0ryxagdlb_nQsAAgL3wxI2uDeQfYBsylR5_4Y7E5x5Qgc7YwrztbRUq9P5WgA3-OmOGgVZkUdU7udpzzmeSjt-T9DRc863fEGq1GEOa4FQXVscruvPiHeX-vZdLZjpIKkSPfPEAWl0sYPyAvhqeHoknU2GNr_JClFTSIAsJpEL-WZW1dNkmRn2pGiqSqu9oxjqKB2qdFHkyJRVrv2PbYnh3BklvwepYyH1RmRv11iYxxexNLm7Bi6Ew05b5254yMQAhdjRSqN4dDOtpUTFt2FqJNwlK8GdNbjv0XA_ZzDwe3dtBJgyM2R9HTI_rS4YqDgDqy_tb1whI6ICMkgjViwWTdNCx3_BPHCvdGNyBssxIu99bSxJ7weVKp8_r9LsqS0VhNq_ti_Md1qUn0klJMctZUMvZbZbcgx7dvTuPKTmldBPMNg5foKUjV2LJfPvNkLw0NhYIvJMHCKLkUhkp1fem30uHDc7qGaAlMsvV85GbyPnnzfr-noqE3Hri_yRr5i6BUcGSxYGUL25qZxY0rPmxd8ra4Bf10uCv13G9NmE6zqBfmikQnBkUFnpTkEcEMW4T3vrhHgUhHzmLGMxrpAoWDbhi3I5DomXPiIGRk7cwCNzVOh_j1pmiwcM-YcS7NRZgZurIIT6CEz4UIVlso99o8n-ibdRF-ux_fNJVdpqj6gAwuy3GKq08V1Qjr8-fJHRLlDHnuksD5PuYrt1FDXX5sC-Qrr2GGanGCIRVUaaoBw-R8LtCS76el0lbAa05-kRxMH6okQsBV2p6IgwIZiLtD8XcTRZlt4j9cvCh2VXtATbQgGkQvohUX6onj2OPch2cB0FEpsSlEeSv6RhBg7AL8NqaZKDVA1CicmNnHbmNjMu2Zu6OKSRNrELlaM.7yr8j_PAdwtJR8PoWOT_Nw",
    "token_type": "bearer",
    "expires_in": 1799,
    "scope": "reptilians",
    "jti": "acd1804e-eb0b-4b99-aa96-85a3a00d6171"
}</con:responseContent><con:header><con:name>content-type</con:name><con:value>application/json;charset=UTF-8</con:value></con:header></con:response><con:response name="Scenario4" id="4172cb9c-de19-406f-abca-5087af6fea2d" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario5" id="6b0acf5f-6ab4-4926-8007-e7bdb6aad48a" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario6" id="4c2c6c97-1ce0-4063-9621-4c743564045e" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario7" id="29a1f027-7d92-4942-80c8-62e547af0f70" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario8" id="24394a74-02af-4df5-8aed-f1c6331b0164" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario9" id="2fb492c8-a257-420a-a648-3cfc45596ba1" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/mortgage-origination/v1/events/mss-events" method="POST" resourcePath="/mortgage-origination/v1/events/mss-events" id="ae61756c-f396-4b18-b433-2e2cd2dcc69b"><con:settings/><con:defaultResponse>Scenario3</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Scenario1" id="685edd40-a872-4f79-a8e6-e2619c0526e3" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario2" id="81fc1f2a-fd97-4d19-af30-b0db98c8b711" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario3" id="2a3daa3f-44aa-4f4d-b274-69240d6de3b4" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="Scenario4" id="f76539e0-ffd9-46d7-b74d-e2826174724b" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>